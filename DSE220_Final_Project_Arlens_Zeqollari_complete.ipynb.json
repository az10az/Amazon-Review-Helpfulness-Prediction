{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "WeywiUBs7DgW"
   },
   "source": [
    "**DSE 220: Machine Learning Final Exam/Project**\n",
    "\n",
    "*Arlens Zeqollari*\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "535thJoVBHXQ"
   },
   "source": [
    "# Setup and Instructions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "heading_collapsed": true,
    "id": "kDjChzbQ9uJ4"
   },
   "source": [
    "## **1 - Instructions**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "hidden": true,
    "id": "cx-c9vRcF8hk"
   },
   "source": [
    "The deadline for the kaggle competition is 9 June 2019 (11:59 PM PST). The report and the code for the final should be submitted on Gradescope by 9 June 2019 (11:59 PM PST). To secure full marks both the report and the code should be in sync and logically correct. Please only submit relevant and legible code. Please complete the final individually."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "heading_collapsed": true,
    "id": "0Y9D9OFX-Cob"
   },
   "source": [
    "## **2 - Overview**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "hidden": true,
    "id": "UmtEZ-DEGCij"
   },
   "source": [
    "For the take-home final of DSE 220: Machine Learning, we combine all the concepts we have learned so far and apply them to a real world problem. The problem, in very broad terms, is to predict how useful an Amazon product review is going to be. The problem is open-ended and you can use any method you like.\n",
    "\n",
    "Amazon is a leading e-commerce website and uses Machine Learning appli- cations extensively in their products. For example, they recommend products based on your browsing history and previous purchases so as to maximize their profit (by selling you another product!). For your final, you are given Amazon data. Given a review, the item for which the review is and the user who has written the review, you need to predict how helpful the review will be.\n",
    "\n",
    "Solutions will be graded on Kaggle. Please follow the link - https://www.kaggle.com/t/7d53b23e032a4edfb0364499ae07cbda\n",
    "\n",
    "to view the webpage and signup using your UCSD email id (@ucsd.edu and not @eng.ucsd.edu). Note that the time reported on Kaggle are in UTC and not PST.\n",
    "\n",
    "You will also be graded on a brief report, to be submitted electronically on Gradescope. Your grades will be determined by your performance on the pre- dictive task as well as your written report about the approaches you took."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "heading_collapsed": true,
    "id": "D9B_e7pPFCh2"
   },
   "source": [
    "## 3 - Files\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "hidden": true,
    "id": "qPnqthhzGMwD"
   },
   "source": [
    "\n",
    "**train.json.gz** - 200,000 reviews to be used for training. It is not necessary to use all reviews for training, for example if doing so proves too computationally intensive. While these files are one-json-per-line, you may find it useful to represent them more concisely in order to produce a more efficient solution. \n",
    "\n",
    "> The fields in this file are:\n",
    "\n",
    "\n",
    "\n",
    "> *   **itemID** The ID of the item. This is a hashed product identifier from Amazon.\n",
    "*   **reviewerID** The ID of the reviewer. This is a hashed user identifier from Amazon.\n",
    "* **helpful** Helpfulness votes for the review. This has two subfields, ‘nHelpful’ and ‘outOf’. The latter is the total number of votes this review received, the former is the number of those that considered the review to be helpful.\n",
    "* **reviewText** The text of the review. It should be possible to successfully complete this task without making use of the review data, though an effective solution to the helpfulness prediction task will presumably make use of it.\n",
    "* **summary** Summary of the review.\n",
    "* **price** Price of the item.\n",
    "* **reviewHash** Hash of the review (essentially a unique identifier for the review).\n",
    "* **unixReviewTime** Time of the review, i.e, time elapsed in seconds since 1970. For example - 1400544000\n",
    "* **reviewTime** Plain-text representation of the review time in human read- able format. For example - ’05 20, 2014’\n",
    "* **category** Category labels of the product being reviewed.\n",
    "* **rating** Rating given by the reviewer.\n",
    "\n",
    "\n",
    "**pairs_Helpful.txt** Pairs on which you are to predict helpfulness votes. A third column in this file is the total number of votes, from which you should predict how many were helpful.\n",
    "\n",
    "**test_Category.json.gz** The review data associated with the category prediction test set. Again, the field that you are trying to predict has been removed.\n",
    "\n",
    "**Baseline.ipynb** A simple baseline for the task, described later."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "heading_collapsed": true,
    "id": "fDbO5HCEHwYF"
   },
   "source": [
    "## 4 - Task\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "hidden": true,
    "id": "hhNehNESIiKT"
   },
   "source": [
    "**Helpfulness prediction** - Predict whether a user’s review of an item will be considered helpful. The file ’pairs Helpful.txt’ contains (user,item) pairs, with a third column containing the number of votes the user’s review of the item received. You must predict how many of them were helpful. Accuracy will be measured in terms of the mean absolute error, i.e., you are penalized one according to the **absolute difference of nHelpful and prediction**, where ’nHelpful’ is the number of helpful votes the review actually received, and ’prediction’ is your prediction of this quantity.\n",
    "\n",
    "The error measure is described on Kaggle: Mean Absolute error\n",
    "\n",
    "A competition page has been set up on Kaggle to keep track of your results compared to those of other members of the class. The leaderboard will show your results on half of the test data, but your ultimate score will depend on your predictions across the whole dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "heading_collapsed": true,
    "id": "3vSyzpodJIZE"
   },
   "source": [
    "## 5 - Grading and Evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "hidden": true,
    "id": "RYWZEFp9J6zn"
   },
   "source": [
    "You will be graded on the following aspects.\n",
    "\n",
    "* Your ability to obtain a solution which outperforms the baselines on the total test data (including the unseen portion). Obtaining full marks requires a solution which is substantially better than baseline performance. \n",
    "\n",
    "> Following are the marks you’ll get for beating every benchmark. \n",
    "\n",
    ">> Baseline: 0.261\n",
    "\n",
    ">> Benchmark I: ≤ 0.190 15 marks \n",
    "\n",
    ">>Benchmark II: ≤ 0.185 20 marks \n",
    "\n",
    ">> Benchmark III: ≤ 0.179 25 marks \n",
    "\n",
    ">> Benchmark IV: ≤ 0.176 30 marks \n",
    "\n",
    ">> Benchmark V: ≤ 0.173 35 marks \n",
    "\n",
    ">> Benchmark VI: ≤ 0.170 40 marks \n",
    "\n",
    ">> Benchmark VII: ≤ 0.166 45 marks \n",
    "\n",
    ">> Benchmark VIII: ≤ 0.162 50 marks\n",
    "\n",
    "* Obtain a solution which outperforms the baselines on the seen portion of the test data (i.e., the public leaderboard) to obtain 20 marks. This is a consolation prize in case you overfit to the leaderboard.\n",
    "\n",
    "* The report accounts for 30 marks. It should describe the approaches you took to perform the task. Make sure that the methods you describe in the report include all the aspects of your final model including pre-processing, feature engineering etc. The aim is that anyone with your report should be able to recreate your results. Even if your model doesn’t perform well, you can obtain marks in this section for the comprehensiveness of your analysis.\n",
    "\n",
    "\n",
    "You can obtain a maximum of 100 marks in this project, which will the scaled down to 40% of the total course assessment. To obtain good performance, you should not need to invent new approaches (though you are more than welcome to!)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "heading_collapsed": true,
    "id": "SUjp0LBGL0Om"
   },
   "source": [
    "## 6 - Kaggle"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "hidden": true,
    "id": "PxyzaDV8Mt3b"
   },
   "source": [
    "We have set up a Kaggle page to help you evaluate your solution. You should be\n",
    "able to access the competition via your UCSD address(@ucsd.edu, not @eng.ucsd.edu).\n",
    "\n",
    "[https://www.kaggle.com/t/7d53b23e032a4edfb0364499ae07cbda](https://www.kaggle.com/t/7d53b23e032a4edfb0364499ae07cbda)\n",
    "\n",
    "You can submit only 20 submissions per day to Kaggle. This is to ensure that you don’t learn from the test data. Please ensure that you use a good validation set for measuring the performance of your model. Tuning your models based on the leaderboard position can lead to overfitting and you might end up losing all the marks based on the private leaderboard.\n",
    "\n",
    "You need to select two top submissions on which you want us to evaluate you at the end of the competition. If top two submissions are not selected, we pick the top two submissions according to the public leaderboard."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "heading_collapsed": true,
    "id": "1T06smd6McYe"
   },
   "source": [
    "## 7 - Baselines"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "hidden": true,
    "id": "1gcXS2oSMenj"
   },
   "source": [
    "Simple baseline solution has been provided for the task. These are included in ‘Baseline.ipynb’ among the files above. The baseline operate as follows:\n",
    "\n",
    "Multiply the number of votes by the global average helpfulness ratio (nHelpful/outOf), or the user’s average helpfulness ratio if we saw the same user in the training data.\n",
    "\n",
    "Running the given iPython notebook produces files containing predicted outputs. Your submission files should have the same format. Hints will be provided to you on Piazza by the TAs from time to time depending upon the class per- formance. Please monitor Piazza posts for updates."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "9iygy6a8NHQK"
   },
   "source": [
    "# Import Required Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "mK_OQBy4NF_5"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
      "[nltk_data]     /Users/az37/nltk_data...\n",
      "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
      "[nltk_data]       date!\n",
      "[nltk_data] Downloading package punkt to /Users/az37/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package wordnet to /Users/az37/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "import json\n",
    "import gzip\n",
    "from collections import defaultdict\n",
    "\n",
    "from sklearn.preprocessing import MultiLabelBinarizer\n",
    "import nltk\n",
    "from nltk import word_tokenize, pos_tag\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import AdaBoostRegressor\n",
    "from sklearn import metrics\n",
    "from textblob import TextBlob\n",
    "\n",
    "nltk.download('averaged_perceptron_tagger');\n",
    "nltk.download('punkt');\n",
    "nltk.download('wordnet')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "29QMKV8z1DtC"
   },
   "source": [
    "## Helpfulness Baseline\n",
    "### Compute the global average helpfulness rate, and the average helpfulness rate for each user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ucuRLwYDNrz0"
   },
   "outputs": [],
   "source": [
    "def readGz(f):\n",
    "  for l in gzip.open(f):\n",
    "    yield eval(l)\n",
    "\n",
    "allHelpful = []\n",
    "userHelpful = defaultdict(list)\n",
    "itemHelpful = defaultdict(list)\n",
    "\n",
    "for l in readGz(\"train.json.gz\"):\n",
    "  user,item = l['reviewerID'],l['itemID']\n",
    "  allHelpful.append(l['helpful'])\n",
    "  userHelpful[user].append(l['helpful'])\n",
    "  itemHelpful[item].append(l['helpful'])\n",
    "\n",
    "averageRate = sum([x['nHelpful'] for x in allHelpful]) * 1.0 / sum([x['outOf'] for x in allHelpful])\n",
    "userRate = {}\n",
    "for u in userHelpful:\n",
    "  totalU = sum([x['outOf'] for x in userHelpful[u]])\n",
    "  if totalU > 0:\n",
    "    userRate[u] = sum([x['nHelpful'] for x in userHelpful[u]]) * 1.0 / totalU\n",
    "  else:\n",
    "    userRate[u] = averageRate\n",
    "    \n",
    "itemRate = {}\n",
    "for i in itemHelpful:\n",
    "  totalI = sum([x['outOf'] for x in itemHelpful[i]])\n",
    "  if totalI > 0:\n",
    "    itemRate[i] = sum([x['nHelpful'] for x in itemHelpful[i]]) * 1.0 / totalI\n",
    "  else:\n",
    "    itemRate[i] = averageRate\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "qp36CZieJ93F",
    "outputId": "5c25494a-f9bf-4e7a-8c16-488569cddbf5"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Global Helpfulness Rate 0.8519720886532813\n"
     ]
    }
   ],
   "source": [
    "# Average Global Helpfulness rate\n",
    "print('Average Global Helpfulness Rate',averageRate)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "My1PDTqS1bO9"
   },
   "source": [
    "## For reading the files in a pandas DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "7l5I55E6XQqs"
   },
   "outputs": [],
   "source": [
    "from collections import defaultdict\n",
    "\n",
    "def readGz(f):\n",
    "    for l in gzip.open(f):\n",
    "        yield eval(l)\n",
    "\n",
    "def parse(path):\n",
    "    g = gzip.open(path, 'rb')\n",
    "    for l in g:\n",
    "        yield eval(l)\n",
    "\n",
    "def getDF(path):\n",
    "    i = 0\n",
    "    df = {}\n",
    "    for d in parse(path):\n",
    "        df[i] = d\n",
    "        i += 1\n",
    "    return pd.DataFrame.from_dict(df, orient='index')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = getDF('train.json.gz')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_df = getDF('test_Helpful.json.gz')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "94orPA6FESAq"
   },
   "source": [
    "# 8 - Cleaning and Feature Generation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "csAlYR1IX_XR"
   },
   "source": [
    "## Training df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "FIeGK8q070lz"
   },
   "outputs": [],
   "source": [
    "# Create 'outOf' from 'helpful' \n",
    "df['outOf'] = df['helpful'].map(lambda x: x['outOf'])\n",
    "\n",
    "# Create 'reviews_per_item'\n",
    "reviews_per_item = dict(df.itemID.value_counts())\n",
    "df['total_item_reviews'] = df['itemID'].map(lambda item: reviews_per_item[item])\n",
    "\n",
    "# Remove all rows where outOf < 10\n",
    "#df = df[df['outOf'] < 10]\n",
    "df = df[df['outOf'] >= 1]\n",
    "\n",
    "# Create 'nHelpful' from 'helpful'\n",
    "df['nHelpful'] = df['helpful'].map(lambda x: list(x.values())[1]) # Will need to be removed in final submission because this is what needs to be predicted.\n",
    "#df_low['nHelpful'] = df_low['helpful'].map(lambda x: list(x.values())[1])\n",
    "\n",
    "# Create 'perc_helpful' from 'nHelpful' and 'outOf' # Will need to be removed in final submission because this is what needs to be predicted.\n",
    "df['perc_helpful'] = df['nHelpful'] / df['outOf']\n",
    "#df_low['perc_helpful'] = df_low['nHelpful'] / df_low['outOf']\n",
    "\n",
    "# Sort dataset by 'nHelpful'\n",
    "#df = df.sort_values('nHelpful',ascending = False) # Will need to be removed in final submission because this is what needs to be predicted.\n",
    "#df = df.reset_index(drop = True) # Will need to be removed in final submission because this is what needs to be predicted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "VyrkElb7IKmU"
   },
   "outputs": [],
   "source": [
    "# Create first review time for each item - to be used for 'review_lateness' feature\n",
    "first_item_review = {}\n",
    "for item in df.itemID.unique():\n",
    "  first_item_review[item] = min(df.unixReviewTime[df.itemID == item].to_list())\n",
    "df['first_item_review'] = df.itemID.map(lambda item: first_item_review[item])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "67_RqM9nEBSn"
   },
   "outputs": [],
   "source": [
    "# Create average helpfulness for reviews for each item\n",
    "ave_item_helpful = {}\n",
    "for item in df.itemID.unique():\n",
    "  ave_item_helpful[item] = np.average(df.perc_helpful[df.itemID == item].to_list())\n",
    "df['ave_item_helpful'] = df.itemID.map(lambda item: ave_item_helpful[item])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "code_folding": [],
    "colab": {},
    "colab_type": "code",
    "id": "DTIrIFSnYeFh"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50% done......\n",
      "75% done......\n"
     ]
    }
   ],
   "source": [
    "# Create \"review_len\" from 'reviewText'\n",
    "df['review_len'] = df['reviewText'].apply(len)\n",
    "\n",
    "# Create 'word_count' from 'reviewText'\n",
    "df['word_count'] = df['reviewText'].apply(lambda x: len(x.split()))\n",
    "\n",
    "# Create 'ave_word_len' from 'reviewText'\n",
    "df['ave_word_len'] = df['review_len'] / df['word_count']\n",
    "\n",
    "# Create 'ave_user_helpfulness' from userRate # Can't use this if user does not exist in the training set.\n",
    "df['ave_user_helpfulness'] = df.reviewerID.map(lambda x: userRate[x])\n",
    "\n",
    "# Create User Experience Metric (num of reviews as % of total in dataset) as 'user_experience'\n",
    "user_experience = dict(df.reviewerID.value_counts() / df.reviewerID.value_counts().sum())\n",
    "df['user_experience'] = df.reviewerID.map(lambda x: user_experience[x])\n",
    "\n",
    "# Create 'colon_density' from 'reviewText' since many helpful reviews detailed specific sections (example: 'Fit: ..')\n",
    "df['colon_density'] = df.reviewText.map(lambda text: text.count(':')) / df['word_count']\n",
    "\n",
    "# Generate 'numerical_density' from 'reviewText' since many helpful reviews describe dimensions and physical details of products\n",
    "df['numerical_density'] = df.reviewText.apply(lambda review: sum([c.isdigit() for c in review])) / df.review_len\n",
    "\n",
    "# Create 'exclamation_density' from 'reviewText'\n",
    "df['exclamation_density'] = df.reviewText.map(lambda text: text.count('!')) / df['review_len']\n",
    "\n",
    "# Generate density of ALL CAPS words from 'reviewText' that are greater than 2 characters (excluding words such as I, A, US, ID)\n",
    "df['all_caps_density'] = df.reviewText.apply(lambda review: sum([w.isupper() for w in review.split() if len(w) > 2])) / df.word_count\n",
    "\n",
    "# Generate 'hyphen_density' from 'reviewText'\n",
    "df['hyphen_density'] = df.reviewText.map(lambda text: text.count('-')) / df['word_count']\n",
    "\n",
    "print('50% done......')\n",
    "\n",
    "# Generate summary word count from 'summary'\n",
    "df['sum_word_count'] = df['summary'].apply(lambda x: len(x.split()))\n",
    "\n",
    "# Create 'sum_exclamation_density' from 'summary'\n",
    "df['sum_exclamation_density'] = df.summary.map(lambda text: text.count('!')) / df['sum_word_count']\n",
    "\n",
    "# Create 'contains_update' from 'reviewText'\n",
    "df['contains_update'] = df.reviewText.map(lambda text: text.lower().count('update'))\n",
    "\n",
    "# Create 'review_lateness' from 'first_item_review'\n",
    "df['review_lateness'] = df.unixReviewTime - df.first_item_review\n",
    "\n",
    "# Convert rating to logarithm\n",
    "df['log_rating'] = df.rating.map(lambda x: np.log(x))\n",
    "\n",
    "# Fill NaN of 'price' with the mean\n",
    "df['price'] = df.groupby('categoryID')['price'].transform(lambda x: x.fillna(x.mean()))\n",
    "\n",
    "# Create 'readability' index for difficulty to read review.\n",
    "import textstat\n",
    "\n",
    "def lexicon_count(x):\n",
    "    blob = TextBlob(x)\n",
    "    return len({word.lemma for word, tag in blob.tags if tag[0].lower() in [\"n\",\"v\",\"j\"] and blob.words.count(word)})\n",
    "df['lexicon_count'] = df.reviewText.apply(lexicon_count)\n",
    "\n",
    "df['readability'] = df.reviewText.map(lambda x: textstat.flesch_kincaid_grade(x))\n",
    "\n",
    "print('75% done......')\n",
    "\n",
    "# Create polarity\n",
    "df['polarity'] = df.reviewText.map(lambda x: TextBlob(x).sentiment.polarity)\n",
    "\n",
    "# Create Subjectivity\n",
    "df['subjectivity'] = df.reviewText.map(lambda x: TextBlob(x).sentiment.subjectivity)\n",
    "\n",
    "# Create character count\n",
    "def char_count(x):\n",
    "    chars = sum(len(w) for w in x)\n",
    "    return chars\n",
    "df['char_count'] = df.reviewText.apply(char_count)\n",
    "\n",
    "# Create sentence count\n",
    "df['sentence_count'] = df.reviewText.map(lambda x: len(TextBlob(x).sentences))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create dummies for categoryID\n",
    "category_dummies = pd.get_dummies(df.categoryID, columns = ['categoryID'],prefix = 'categoryID',drop_first=True)\n",
    "df = pd.concat([df,category_dummies],axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['categoryID'] = df['categoryID'].astype(str)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "yKgDEyebYUaD"
   },
   "source": [
    "## Test df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "code_folding": [],
    "colab": {},
    "colab_type": "code",
    "id": "sP5VrijEapSP"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50% done......\n",
      "75% done......\n"
     ]
    }
   ],
   "source": [
    "# Create 'outOf' from 'helpful' \n",
    "test_df['outOf'] = test_df['helpful'].map(lambda x: x['outOf'])\n",
    "\n",
    "# Create 'reviews_per_item'\n",
    "def try_reviews_per_item(x):\n",
    "  try: \n",
    "    #print('found item')\n",
    "    reviews = reviews_per_item[x]\n",
    "    return reviews\n",
    "  except:\n",
    "    #print('did not find item')\n",
    "    return np.mean(list(reviews_per_item.values()))\n",
    "test_df['total_item_reviews'] = test_df.itemID.map(lambda item: try_reviews_per_item(item))\n",
    "\n",
    "# Create 'first_item_review'\n",
    "def try_first_time_review(x):\n",
    "  try: \n",
    "    #print('found item')\n",
    "    time = first_item_review[x]\n",
    "    return time\n",
    "  except:\n",
    "    #print('did not find item')\n",
    "    return np.mean(list(first_item_review.values()))\n",
    "test_df['first_item_review'] = test_df.itemID.map(lambda item: try_first_time_review(item))\n",
    "\n",
    "# Create average helpfulness for reviews for each item\n",
    "def try_ave_help(x):\n",
    "  try: \n",
    "    #print('found item')\n",
    "    help = ave_item_helpful[x]\n",
    "    return help\n",
    "  except:\n",
    "    #print('did not find item')\n",
    "    return np.mean(list(ave_item_helpful.values()))\n",
    "test_df['ave_item_helpful'] = test_df.itemID.map(lambda item: try_ave_help(item))\n",
    "\n",
    "# Create \"review_len\" from 'reviewText'\n",
    "test_df['review_len'] = test_df['reviewText'].apply(len)\n",
    "\n",
    "# Create 'word_count' from 'reviewText'\n",
    "test_df['word_count'] = test_df['reviewText'].apply(lambda x: len(x.split()))\n",
    "\n",
    "# Create 'ave_word_len' from 'reviewText'\n",
    "test_df['ave_word_len'] = test_df['review_len'] / test_df['word_count']\n",
    "\n",
    "# Create 'ave_user_helpfulness' from userRate # Defaults to global average user rating if user does not exist in the training set.\n",
    "def try_user_rate(x):\n",
    "  try:\n",
    "    ave_user_helpfulness = userRate[x]\n",
    "    #print('found user')\n",
    "    return ave_user_helpfulness\n",
    "  except:\n",
    "    #print('did not find user')\n",
    "    return averageRate\n",
    "test_df['ave_user_helpfulness'] = test_df.reviewerID.map(lambda x: try_user_rate(x))\n",
    "\n",
    "# Create User Experience Metric (num of reviews as % of total in dataset) as 'user_experience'\n",
    "def try_user_experience(x):\n",
    "  try: \n",
    "    #print('found user')\n",
    "    user_exp = user_experience[x]\n",
    "    return user_exp\n",
    "  except:\n",
    "    #print('did not find user')\n",
    "    return np.mean(list(user_experience.values()))  \n",
    "test_df['user_experience'] = test_df.reviewerID.map(lambda x: try_user_experience(x))\n",
    "\n",
    "# Create 'colon_density' from 'reviewText' since many helpful reviews detailed specific sections (example: 'Fit: ..')\n",
    "test_df['colon_density'] = test_df.reviewText.map(lambda text: text.count(':')) / test_df['word_count']\n",
    "\n",
    "# Generate 'numerical_density' from 'reviewText' since many helpful reviews describe dimensions and physical details of products\n",
    "test_df['numerical_density'] = test_df.reviewText.apply(lambda review: sum([c.isdigit() for c in review])) / test_df.review_len\n",
    "\n",
    "# Create 'exclamation_density' from 'reviewText'\n",
    "test_df['exclamation_density'] = test_df.reviewText.map(lambda text: text.count('!')) / test_df['review_len']\n",
    "\n",
    "# Generate density of ALL CAPS words from 'reviewText' that are greater than 2 characters (excluding words such as I, A, US, ID)\n",
    "test_df['all_caps_density'] = test_df.reviewText.apply(lambda review: sum([w.isupper() for w in review.split() if len(w) > 2])) / test_df.word_count\n",
    "\n",
    "# Generate 'hyphen_density' from 'reviewText'\n",
    "test_df['hyphen_density'] = test_df.reviewText.map(lambda text: text.count('-')) / test_df['word_count']\n",
    "\n",
    "# Generate summary word count from 'summary'\n",
    "test_df['sum_word_count'] = test_df['summary'].apply(lambda x: len(x.split()))\n",
    "\n",
    "# Create 'sum_exclamation_density' from 'summary'\n",
    "test_df['sum_exclamation_density'] = test_df.summary.map(lambda text: text.count('!')) / test_df['sum_word_count']\n",
    "\n",
    "# Create 'contains_update' from 'reviewText'\n",
    "test_df['contains_update'] = test_df.reviewText.map(lambda text: text.lower().count('update'))\n",
    "\n",
    "# Create 'review_lateness' from 'first_item_review'\n",
    "test_df['review_lateness'] = test_df.unixReviewTime - test_df.first_item_review\n",
    "def remove_neg(x):\n",
    "    if x < 0:\n",
    "        return 0\n",
    "    else:\n",
    "        return x\n",
    "test_df['review_lateness'] = test_df.review_lateness.apply(remove_neg) # Removed negative because of distribution\n",
    "\n",
    "print('50% done......')\n",
    "\n",
    "# Convert rating to logarithm\n",
    "test_df['log_rating'] = test_df.rating.map(lambda x: np.log(x))\n",
    "\n",
    "# Fill NaN of 'price' with the mean of categoryID's price\n",
    "test_df['price'] = test_df.groupby('categoryID')['price'].transform(lambda x: x.fillna(x.mean()))\n",
    "\n",
    "# Create 'readability' index for difficulty to read review.\n",
    "import textstat\n",
    "test_df['lexicon_count'] = test_df.reviewText.apply(lexicon_count)\n",
    "test_df['readability'] = test_df.reviewText.map(lambda x: textstat.flesch_kincaid_grade(x))\n",
    "\n",
    "# Create polarity\n",
    "test_df['polarity'] = test_df.reviewText.map(lambda x: TextBlob(x).sentiment.polarity)\n",
    "\n",
    "print('75% done......')\n",
    "\n",
    "# Create Subjectivity\n",
    "test_df['subjectivity'] = test_df.reviewText.map(lambda x: TextBlob(x).sentiment.subjectivity)\n",
    "\n",
    "# Create character count\n",
    "def char_count(x):\n",
    "    chars = sum(len(w) for w in x)\n",
    "    return chars\n",
    "test_df['char_count'] = test_df.reviewText.apply(char_count)\n",
    "\n",
    "# Create sentence count\n",
    "test_df['sentence_count'] = test_df.reviewText.map(lambda x: len(TextBlob(x).sentences))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create dummies for categoryID\n",
    "category_dummies = pd.get_dummies(test_df.categoryID, columns = ['categoryID'],prefix = 'categoryID',drop_first=True)\n",
    "test_df = pd.concat([test_df,category_dummies],axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_df['categoryID'] = test_df['categoryID'].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>categoryID</th>\n",
       "      <th>categories</th>\n",
       "      <th>itemID</th>\n",
       "      <th>reviewerID</th>\n",
       "      <th>rating</th>\n",
       "      <th>reviewText</th>\n",
       "      <th>reviewHash</th>\n",
       "      <th>reviewTime</th>\n",
       "      <th>summary</th>\n",
       "      <th>unixReviewTime</th>\n",
       "      <th>...</th>\n",
       "      <th>lexicon_count</th>\n",
       "      <th>readability</th>\n",
       "      <th>polarity</th>\n",
       "      <th>subjectivity</th>\n",
       "      <th>char_count</th>\n",
       "      <th>sentence_count</th>\n",
       "      <th>categoryID_1</th>\n",
       "      <th>categoryID_2</th>\n",
       "      <th>categoryID_3</th>\n",
       "      <th>categoryID_4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>[[Clothing, Shoes &amp; Jewelry, Wedding Party Gif...</td>\n",
       "      <td>I408260822</td>\n",
       "      <td>U441384838</td>\n",
       "      <td>3.0</td>\n",
       "      <td>it's better on a man's hand.I didn't find it v...</td>\n",
       "      <td>R345042616</td>\n",
       "      <td>05 13, 2014</td>\n",
       "      <td>Good price but...</td>\n",
       "      <td>1399939200</td>\n",
       "      <td>...</td>\n",
       "      <td>16</td>\n",
       "      <td>5.2</td>\n",
       "      <td>0.466667</td>\n",
       "      <td>0.466667</td>\n",
       "      <td>144</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>[[Clothing, Shoes &amp; Jewelry, Women, Plus-Size,...</td>\n",
       "      <td>I919238161</td>\n",
       "      <td>U096604734</td>\n",
       "      <td>5.0</td>\n",
       "      <td>I'm quite small and the XS fits me like a regu...</td>\n",
       "      <td>R317526520</td>\n",
       "      <td>07 30, 2013</td>\n",
       "      <td>Great shirt</td>\n",
       "      <td>1375142400</td>\n",
       "      <td>...</td>\n",
       "      <td>33</td>\n",
       "      <td>14.8</td>\n",
       "      <td>0.286111</td>\n",
       "      <td>0.564103</td>\n",
       "      <td>424</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  categoryID                                         categories      itemID  \\\n",
       "2          0  [[Clothing, Shoes & Jewelry, Wedding Party Gif...  I408260822   \n",
       "4          0  [[Clothing, Shoes & Jewelry, Women, Plus-Size,...  I919238161   \n",
       "\n",
       "   reviewerID  rating                                         reviewText  \\\n",
       "2  U441384838     3.0  it's better on a man's hand.I didn't find it v...   \n",
       "4  U096604734     5.0  I'm quite small and the XS fits me like a regu...   \n",
       "\n",
       "   reviewHash   reviewTime            summary  unixReviewTime  ...  \\\n",
       "2  R345042616  05 13, 2014  Good price but...      1399939200  ...   \n",
       "4  R317526520  07 30, 2013        Great shirt      1375142400  ...   \n",
       "\n",
       "  lexicon_count  readability  polarity  subjectivity  char_count  \\\n",
       "2            16          5.2  0.466667      0.466667         144   \n",
       "4            33         14.8  0.286111      0.564103         424   \n",
       "\n",
       "   sentence_count  categoryID_1  categoryID_2  categoryID_3  categoryID_4  \n",
       "2               2             0             0             0             0  \n",
       "4               2             0             0             0             0  \n",
       "\n",
       "[2 rows x 43 columns]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>categoryID</th>\n",
       "      <th>categories</th>\n",
       "      <th>itemID</th>\n",
       "      <th>reviewerID</th>\n",
       "      <th>rating</th>\n",
       "      <th>reviewText</th>\n",
       "      <th>reviewHash</th>\n",
       "      <th>reviewTime</th>\n",
       "      <th>summary</th>\n",
       "      <th>unixReviewTime</th>\n",
       "      <th>...</th>\n",
       "      <th>lexicon_count</th>\n",
       "      <th>readability</th>\n",
       "      <th>polarity</th>\n",
       "      <th>subjectivity</th>\n",
       "      <th>char_count</th>\n",
       "      <th>sentence_count</th>\n",
       "      <th>categoryID_1</th>\n",
       "      <th>categoryID_2</th>\n",
       "      <th>categoryID_3</th>\n",
       "      <th>categoryID_4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>[[Sports &amp; Outdoors, Other Sports, Dance, Clot...</td>\n",
       "      <td>I520932398</td>\n",
       "      <td>U816789534</td>\n",
       "      <td>3.0</td>\n",
       "      <td>I ordered according to the size chart but it's...</td>\n",
       "      <td>R157684793</td>\n",
       "      <td>07 15, 2011</td>\n",
       "      <td>Too small</td>\n",
       "      <td>1310688000</td>\n",
       "      <td>...</td>\n",
       "      <td>13</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.168333</td>\n",
       "      <td>0.505000</td>\n",
       "      <td>147</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>[[Sports &amp; Outdoors, Clothing, Women, Hoodies]...</td>\n",
       "      <td>I969532331</td>\n",
       "      <td>U987148846</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Super thin but really cute and not cheap-looki...</td>\n",
       "      <td>R732719858</td>\n",
       "      <td>07 17, 2013</td>\n",
       "      <td>Fun hoodie</td>\n",
       "      <td>1374019200</td>\n",
       "      <td>...</td>\n",
       "      <td>15</td>\n",
       "      <td>10.3</td>\n",
       "      <td>0.216667</td>\n",
       "      <td>0.703333</td>\n",
       "      <td>144</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 41 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  categoryID                                         categories      itemID  \\\n",
       "0          0  [[Sports & Outdoors, Other Sports, Dance, Clot...  I520932398   \n",
       "1          0  [[Sports & Outdoors, Clothing, Women, Hoodies]...  I969532331   \n",
       "\n",
       "   reviewerID  rating                                         reviewText  \\\n",
       "0  U816789534     3.0  I ordered according to the size chart but it's...   \n",
       "1  U987148846     4.0  Super thin but really cute and not cheap-looki...   \n",
       "\n",
       "   reviewHash   reviewTime     summary  unixReviewTime  ... lexicon_count  \\\n",
       "0  R157684793  07 15, 2011   Too small      1310688000  ...            13   \n",
       "1  R732719858  07 17, 2013  Fun hoodie      1374019200  ...            15   \n",
       "\n",
       "   readability  polarity  subjectivity  char_count  sentence_count  \\\n",
       "0          5.0  0.168333      0.505000         147               2   \n",
       "1         10.3  0.216667      0.703333         144               2   \n",
       "\n",
       "   categoryID_1  categoryID_2  categoryID_3  categoryID_4  \n",
       "0             0             0             0             0  \n",
       "1             0             0             0             0  \n",
       "\n",
       "[2 rows x 41 columns]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "R8NfL6Zfg9uh"
   },
   "source": [
    "## Compare Train and Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "WTMJFTLfhB5M",
    "outputId": "8aa063ec-42b2-4d25-beaf-5ed64afffb2e"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df.review_lateness,bins=100);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "ueF5LGNd-Ubq",
    "outputId": "0a0322ad-4c8e-4922-abd9-4ad0bc3a9018"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYAAAAEJCAYAAACdePCvAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAEeVJREFUeJzt3X+MZWV9x/H3R37ZiBXsLpTC6lKzTUVTgW4AS9LQUvnVxNVUkuUPWQnN2hZaTUza1TTFYkhoUjWlVcxaNiyNFak/6hZXcUUba1JwB4r8cKVMkcLIBgZR0NDYYL/9457Fy+ydmTuzs3fu7PN+JTf33Oc8997vPdmczzzP+bGpKiRJ7XnJchcgSVoeBoAkNcoAkKRGGQCS1CgDQJIaZQBIUqMMAElqlAEgSY0yACSpUYcvdwFzWbVqVa1du3a5y5CkFeWuu+56qqpWz9dvrANg7dq1TExMLHcZkrSiJPnvYfo5BSRJjTIAJKlRBoAkNcoAkKRGGQCS1Kh5AyDJmiRfS7InyQNJ3tW1vz/J95Lc0z0u6nvPe5NMJnkwyfl97Rd0bZNJthycnyRJGsYwp4E+D7ynqu5O8nLgriS7unUfrqq/7u+c5BRgI/A64JeAryT5lW71R4A3AVPA7iQ7qurbS/FDJEkLM28AVNVeYG+3/KMke4AT53jLBuDmqvoJ8N0kk8AZ3brJqnoYIMnNXV8DQJKWwYKOASRZC5wG3Nk1XZnk3iTbkhzbtZ0IPNb3tqmubbb2md+xOclEkonp6emFlCdJWoChAyDJ0cBngHdX1bPA9cBrgFPpjRA+uK/rgLfXHO0vbqjaWlXrq2r96tXzXsk8p7VbvvDCQ5L0YkPdCiLJEfR2/p+oqs8CVNUTfes/DtzavZwC1vS9/STg8W55tnZJ0ogNcxZQgBuAPVX1ob72E/q6vRW4v1veAWxMclSSk4F1wDeB3cC6JCcnOZLegeIdS/MzJEkLNcwI4Gzg7cB9Se7p2t4HXJLkVHrTOI8A7wSoqgeS3ELv4O7zwBVV9VOAJFcCtwGHAduq6oEl/C2SpAUY5iygbzB4/n7nHO+5BrhmQPvOud4nSRodrwSWpEYZAJLUKANAkhplAEhSowwASWqUASBJjTIAJKlRBoAkNcoAkKRGGQCS1CgDQJIaZQBIUqMMAElqlAEgSY0yACSpUQaAJDXKAJCkRhkAktQoA0CSGmUASFKjDABJapQBIEmNMgAkqVEGgCQ1ygCQpEYZAJLUKANAkhplAEhSowwASWqUASBJjTIAJKlRBoAkNWreAEiyJsnXkuxJ8kCSd3Xtr0yyK8lD3fOxXXuSXJdkMsm9SU7v+6xNXf+Hkmw6eD9LkjSfYUYAzwPvqarXAmcBVyQ5BdgC3F5V64Dbu9cAFwLrusdm4HroBQZwFXAmcAZw1b7QkCSN3rwBUFV7q+rubvlHwB7gRGADsL3rth14S7e8Abipeu4AjklyAnA+sKuqnq6qHwC7gAuW9NdIkoa2oGMASdYCpwF3AsdX1V7ohQRwXNftROCxvrdNdW2ztUuSlsHQAZDkaOAzwLur6tm5ug5oqznaZ37P5iQTSSamp6eHLU+StEBDBUCSI+jt/D9RVZ/tmp/opnbonp/s2qeANX1vPwl4fI72F6mqrVW1vqrWr169eiG/RZK0AMOcBRTgBmBPVX2ob9UOYN+ZPJuAz/e1X9qdDXQW8Ew3RXQbcF6SY7uDv+d1bZKkZXD4EH3OBt4O3Jfknq7tfcC1wC1JLgceBS7u1u0ELgImgeeAywCq6ukkHwB2d/2urqqnl+RXSJIWbN4AqKpvMHj+HuDcAf0LuGKWz9oGbFtIgZKkg8MrgSWpUQaAJDXKAJCkRhkAktQoA0CSGmUASFKjDABJapQBIEmNMgAkqVEGgCQ1ygCQpEYZAJLUKANAkhplAEhSowwASWqUASBJjTIAJKlRBoAkNcoAkKRGGQCS1CgDQJIaZQBIUqMMAElqlAEgSY0yACSpUQaAJDXKAJCkRhkAktQoA0CSGmUASFKjDABJapQBIEmNMgAkqVHzBkCSbUmeTHJ/X9v7k3wvyT3d46K+de9NMpnkwSTn97Vf0LVNJtmy9D9FkrQQw4wAbgQuGND+4ao6tXvsBEhyCrAReF33no8mOSzJYcBHgAuBU4BLur6SpGVy+HwdqurrSdYO+XkbgJur6ifAd5NMAmd06yar6mGAJDd3fb+94IolSUviQI4BXJnk3m6K6Niu7UTgsb4+U13bbO37SbI5yUSSienp6QMoT5I0l8UGwPXAa4BTgb3AB7v2DOhbc7Tv31i1tarWV9X61atXL7I8SdJ85p0CGqSqnti3nOTjwK3dyylgTV/Xk4DHu+XZ2iVJy2BRI4AkJ/S9fCuw7wyhHcDGJEclORlYB3wT2A2sS3JykiPpHSjesfiyJUkHat4RQJJPAucAq5JMAVcB5yQ5ld40ziPAOwGq6oEkt9A7uPs8cEVV/bT7nCuB24DDgG1V9cCS/xpJ0tCGOQvokgHNN8zR/xrgmgHtO4GdC6pOknTQeCWwJDXKAJCkRhkAktQoA0CSGmUASFKjDABJapQBIEmNMgAkqVEGgCQ1ygCQpEYZAJLUKANAkhplAEhSowwASWqUASBJjTIAJKlRBoAkNcoAkKRGGQCS1CgDQJIaZQBIUqMMAElqlAEgSY0yACSpUQaAJDXKAJCkRhkAktQoA0CSGmUASFKjDABJapQBIEmNMgAkqVHzBkCSbUmeTHJ/X9srk+xK8lD3fGzXniTXJZlMcm+S0/ves6nr/1CSTQfn50iShjXMCOBG4IIZbVuA26tqHXB79xrgQmBd99gMXA+9wACuAs4EzgCu2hcakqTlMW8AVNXXgadnNG8AtnfL24G39LXfVD13AMckOQE4H9hVVU9X1Q+AXewfKpKkEVrsMYDjq2ovQPd8XNd+IvBYX7+prm22dknSMlnqg8AZ0FZztO//AcnmJBNJJqanp5e0OEnSzyw2AJ7opnbonp/s2qeANX39TgIen6N9P1W1tarWV9X61atXL7I8SdJ8FhsAO4B9Z/JsAj7f135pdzbQWcAz3RTRbcB5SY7tDv6e17VJkpbJ4fN1SPJJ4BxgVZIpemfzXAvckuRy4FHg4q77TuAiYBJ4DrgMoKqeTvIBYHfX7+qqmnlgWZI0QvMGQFVdMsuqcwf0LeCKWT5nG7BtQdVJkg4arwSWpEYZAJLUKANAkhplAEhSowwASWqUASBJjTIAJKlRBoAkNcoAkKRGGQCS1CgDQJIaZQBIUqMMAElqlAEgSY0yACSpUfP+fwCHirVbvvDC8iPX/u4yViJJ48ERgCQ1qpkRQD9HA5LkCECSmmUASFKjmpwC6ud0kKRWOQKQpEYZAJLUKANAkhrV/DGAA+HxA0krmSMASWqUI4Al4mhA0krjCECSGuUIoE//X/H9/Ite0qHIAFig2UJCklYaA2AI7vQlHYo8BiBJjTIAJKlRBxQASR5Jcl+Se5JMdG2vTLIryUPd87Fde5Jcl2Qyyb1JTl+KHyBJWpylOAbwW1X1VN/rLcDtVXVtki3d6z8DLgTWdY8zgeu750OO1wRIWgkOxhTQBmB7t7wdeEtf+03VcwdwTJITDsL3S5KGcKABUMCXk9yVZHPXdnxV7QXono/r2k8EHut771TX9iJJNieZSDIxPT19gOVJkmZzoFNAZ1fV40mOA3Yl+c4cfTOgrfZrqNoKbAVYv379futXGqeDJI2rAxoBVNXj3fOTwOeAM4An9k3tdM9Pdt2ngDV9bz8JePxAvl+StHiLDoAkL0vy8n3LwHnA/cAOYFPXbRPw+W55B3BpdzbQWcAz+6aKJEmjdyBTQMcDn0uy73P+saq+lGQ3cEuSy4FHgYu7/juBi4BJ4DngsgP4bknSAVp0AFTVw8AbBrR/Hzh3QHsBVyz2+yRJS8srgSWpUd4MboQ8I0jSOHEEIEmNMgAkqVEGgCQ1ygCQpEZ5EHiZeEBY0nJzBCBJjXIEMAYcDUhaDo4AJKlRjgDGjKMBSaNiAIwxw0DSweQUkCQ1ygCQpEYZAJLUKANAkhrlQeAVwgPCkpaaAbACGQaSloJTQJLUKANAkhrlFNAK1z8dBE4JSRqeIwBJapQjgEOMB4glDcsRgCQ1yhHAIczRgKS5GACNMAwkzWQANG7mWUT79IeE4SEdmgwADTRbMBgG0qHDAGjQbDt3SW0xALRow4wGHDFI48sA0MgYBtJ4MQC0JBY6rTRMfw9ESwfXyAMgyQXA3wCHAX9fVdeOugYdmrwvkrQwqarRfVlyGPCfwJuAKWA3cElVfXtQ//Xr19fExMSiv8+DnRrE4xU61CW5q6rWz9dv1COAM4DJqnoYIMnNwAZgYABIB8Mwfxgs9I+H2aarFtrfaS+N0qgD4ETgsb7XU8CZI65BWnJLdQxkoe2jYCgdukYdABnQ9qI5qCSbgc3dyx8nefAAvm8V8NQBvH+UVkqtK6VOsNYlkb/ar2kV8NSA9nE0ttt1gKWs9dXDdBp1AEwBa/penwQ83t+hqrYCW5fiy5JMDDMPNg5WSq0rpU6w1oPFWg+O5ah11LeD3g2sS3JykiOBjcCOEdcgSWLEI4Cqej7JlcBt9E4D3VZVD4yyBklSz8ivA6iqncDOEX3dkkwljchKqXWl1AnWerBY68Ex8lpHeh2AJGl8+F9CSlKjVnwAJLkgyYNJJpNsGbD+qCSf6tbfmWTt6Kt8oZb5an1Hkukk93SP31+OOrtatiV5Msn9s6xPkuu633JvktNHXWNfLfPVek6SZ/q261+MusaujjVJvpZkT5IHkrxrQJ+x2K5D1jou2/WlSb6Z5FtdrX85oM9Y7AeGrHV0+4GqWrEPegeS/wv4ZeBI4FvAKTP6/BHwsW55I/CpMa71HcDfLfd27Wr5TeB04P5Z1l8EfJHetR1nAXeOca3nALeOwTY9ATi9W345vduizPw3MBbbdchax2W7Bji6Wz4CuBM4a0afcdkPDFPryPYDK30E8MKtJarqf4F9t5botwHY3i1/Gjg3yaAL0g62YWodG1X1deDpObpsAG6qnjuAY5KcMJrqXmyIWsdCVe2tqru75R8Be+hdHd9vLLbrkLWOhW5b/bh7eUT3mHlwcyz2A0PWOjIrPQAG3Vpi5j/SF/pU1fPAM8AvjKS6WeroDKoV4Pe6of+nk6wZsH5cDPt7xsUbu2H3F5O8brmL6aYgTqP3F2C/sduuc9QKY7JdkxyW5B7gSWBXVc26XZd5PzBMrTCi/cBKD4B5by0xZJ9RGKaOfwHWVtWvAV/hZ3+xjKNx2a7DuBt4dVW9Afhb4J+Xs5gkRwOfAd5dVc/OXD3gLcu2XeepdWy2a1X9tKpOpXd3gTOSvH5Gl7HZrkPUOrL9wEoPgHlvLdHfJ8nhwCtYnumCYW6D8f2q+kn38uPAr4+otsUYZtuPhap6dt+wu3rXoRyRZNVy1JLkCHo71E9U1WcHdBmb7TpfreO0Xftq+iHwr8AFM1aNy37gBbPVOsr9wEoPgGFuLbED2NQtvw34anVHWkZs3lpnzPW+md6867jaAVzanbVyFvBMVe1d7qIGSfKL++Z7k5xB79/995ehjgA3AHuq6kOzdBuL7TpMrWO0XVcnOaZb/jngd4DvzOg2FvuBYWod5X5gRf+XkDXLrSWSXA1MVNUOev+I/yHJJL3E3zjGtf5JkjcDz3e1vmM5agVI8kl6Z3msSjIFXEXvgBVV9TF6V3NfBEwCzwGXLU+lQ9X6NuAPkzwP/A+wcZn+CDgbeDtwXzcHDPA+4FV9tY7Ldh2m1nHZricA29P7D6deAtxSVbeO435gyFpHth/wSmBJatRKnwKSJC2SASBJjTIAJKlRBoAkNcoAkKQxknlubjij76u6m/b9R3fl8EUL+S4DQJLGy43sfyHbbP6c3qmkp9E7tfWjC/kiA0CSxsigmxsmeU2SLyW5K8m/JfnVfd2Bn++WX8ECrxpf0ReCSVIjtgJ/UFUPJTmT3l/6vw28H/hykj8GXkbvyuKhGQCSNMa6G/L9BvBPfXewPqp7vgS4sao+mOSN9K52fn1V/d8wn20ASNJ4ewnww+4OojNdTne8oKr+PclLgVX0bjU91AdLksZUdxvu7ya5GF74b0Pf0K1+FDi3a38t8FJgetjP9l5AkjRG+m9uCDxB7+aGXwWup3czuSOAm6vq6iSn0Ltl9NH0Dgj/aVV9eejvMgAkqU1OAUlSowwASWqUASBJjTIAJKlRBoAkNcoAkKRGGQCS1CgDQJIa9f9eKmcHJqdHEAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(test_df.review_lateness,bins=100);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "KmUhx3gFiVSt"
   },
   "source": [
    "## Generate Noun Density"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "colab_type": "code",
    "id": "1hbl6-A-iYtg",
    "outputId": "4f39f21e-63d2-44b2-f656-bfae8ceaf356"
   },
   "outputs": [],
   "source": [
    "# takes approximately 10 minutes to run\n",
    "nltk.download('averaged_perceptron_tagger');\n",
    "nltk.download('punkt');\n",
    "def count_nouns(review):\n",
    "  num_nouns = sum(1 for word, pos, in pos_tag(word_tokenize(review)) if pos == 'NN')\n",
    "  return num_nouns\n",
    "\n",
    "noun_count = df.reviewText.map(lambda x: count_nouns(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "4JCTABxLxRw1"
   },
   "outputs": [],
   "source": [
    "# Generate noun density\n",
    "df['noun_density'] = noun_count / df['word_count']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "KFGsYibtq1W1"
   },
   "source": [
    "## Generate Adjective Density\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "colab_type": "code",
    "id": "2Tx-qo1bq5c1",
    "outputId": "a0e9df16-0c17-467e-eb9b-e0a85c0a8942"
   },
   "outputs": [],
   "source": [
    "# takes approximately 10 minutes to run\n",
    "\n",
    "def count_adj(review):\n",
    "  num_adj = sum(1 for word, pos, in pos_tag(word_tokenize(review)) if pos == 'JJ')\n",
    "  return num_adj\n",
    "\n",
    "adj_count = df.reviewText.map(lambda x: count_adj(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Y6q9lMiurNNy"
   },
   "outputs": [],
   "source": [
    "# Generate adjective density\n",
    "df['adj_density'] = adj_count / df['word_count']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "CVLBHW562bdu"
   },
   "source": [
    "## Generate dummies for categories with 400 or more reviews and join with the dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "tKCu278eH-Rk"
   },
   "outputs": [],
   "source": [
    "# Flatten categories\n",
    "df['categories_flat'] = df.categories.map(lambda x: [item for sublist in x for item in sublist])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ptc0-aIKuDWz"
   },
   "outputs": [],
   "source": [
    "# Create dummies for each category\n",
    "mlb = MultiLabelBinarizer()\n",
    "mlb.fit_transform(df['categories_flat'])\n",
    "\n",
    "one_hot_encoding_for_categories = pd.DataFrame(mlb.fit_transform(df['categories_flat']),columns=mlb.classes_, index=df.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "colab_type": "code",
    "id": "XfqK05eBymdP",
    "outputId": "74b76473-9555-4622-d45c-c531a8bfa8fb"
   },
   "outputs": [],
   "source": [
    "# Generate category columns for categories that have at least 400 or more reviews.\n",
    "columns_to_keep = one_hot_encoding_for_categories.columns[one_hot_encoding_for_categories.sum() >= 400] #500]\n",
    "one_hot_encoding_for_categories_reduced = one_hot_encoding_for_categories[columns_to_keep]\n",
    "print('categories kept: ',one_hot_encoding_for_categories_reduced.columns)\n",
    "df = df.join(one_hot_encoding_for_categories_reduced)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "colab_type": "code",
    "id": "bOFPx4i9tNzI",
    "outputId": "ff8ee7bd-0ff6-4417-b053-a2fe5468bed0"
   },
   "outputs": [],
   "source": [
    "print(df.shape)\n",
    "df.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "AVQgracJ80GK"
   },
   "source": [
    "## Scan text for potential ideas..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "colab_type": "code",
    "id": "CDg4x6E5QPfn",
    "outputId": "f38760b6-4ae4-4f78-c8a9-79b31101ea87"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8571428571428571 ------\n",
      " \n",
      " My husband loves these pants but suggests you order boot cut or they will be too tight in the lower leg. My only problem is getting them dry! I usually dry them in the dryer awhile, turn them inside out and hang them to finish drying. They are durable, but like most of Carhartt's clothing, I think it is overpriced. \n",
      "\n",
      "1.0 ------\n",
      " \n",
      " This was a good fit for me, even though it comes from China, I think Allegra does a good job of staying true to American sizes.  I tend to order one size up to be safe so I ordered an XL, I am 5'7&#34; and 150 lbs.  I probably could have ordered a Large too for a slightly tighter fit but I wanted to be able to wear it tucked in or left out over leggings.  The fabric is polyster/ silky feeling and good for summer or under a blazer for work.  The sleeves have cute ruffles. \n",
      "\n",
      "1.0 ------\n",
      " \n",
      " I bought this solely based on reviews. Firstly the shirt was a little tight- it still fit but had threads hanging all over. The lace is a cheap quality one and after one wash it's totally ruined. Horrible- do not waste money on this. \n",
      "\n",
      "1.0 ------\n",
      " \n",
      " I bought this for my 11 year old, 90 pound 5 foot tall daughter in the extra small and it fits her well.  We both like it because the wider straps allow for a bra without being so wide that they restrict movement like cap sleeves.It washes well (I drip dry it) and was cheaper than locally.Bought again, now she is 13 and five foot four and 105 pounds.  Bought the medium, which fits fine, is perhaps just a tad big, but I would not go down a size.  The material is a little different than the first one, having a bit more stretch but she likes it even better. \n",
      "\n",
      "1.0 ------\n",
      " \n",
      " I'm size 34DD bust size 5'3ft, and have a 28' waist. I love the fit it give me. I like how this is not too baggy because some pullover does that (it hangs over you and make you look bigger than you are), but this does and the pocket on sides creates this curve from waist to bottom so the pullover itself already has a very well define curvy shape, so it'll look good on anyone I think. The pockets aren't big, it's just enough to fit all my fingers in, so keys n cell phones can fit in there.I especially love the blue color color on sleeves end! It's so unique! And the reason why I bought it! The quality is really nice too! It's not thin or too thick, the material will keep you warm. And there's room to wear layers inside pullover for extra warmth since it's already loose fitted as a pullover should be. The measurements as exactly as describe too. By pairing it with a pair of black leggings, black slipdress or skirt, and boots, it'll be the perfect outfit for fall and/or winter! Thanks Allegra K! Please sell more hoodie/pullovers for size 8 or size 10! XD \n",
      "\n",
      "1.0 ------\n",
      " \n",
      " This bra is incredibly comfortable, and at least for me, it is true to size.  I am deployed in Afghanistan, so I do not have the luxury of trying items on before I buy, therefore, I am very impressed with the fit and will be ordering more of this exact bra, but in different colors.  The shoulder straps are a perfect width - not too thick or thin. And the back strap is a good width for support and keeps \"bra muffin top\" away :) \n",
      "\n",
      "1.0 ------\n",
      " \n",
      " This dress arrived well-packaged and delivered in less than 5 days.It really looks great. 125lbs and curvy, I ordered a medium and it fits perfect (not to big, not too tight). \n",
      "\n",
      "1.0 ------\n",
      " \n",
      " Love it love it, make a great coat and it is reversable, which is a huge plus.  So, you can have the fur inside or out!! \n",
      "\n",
      "1.0 ------\n",
      " \n",
      " This bag is perfect if you want to carry the basics without anything spilling out (which is a problem when it comes to mini purses). Small enough to fit what I needed comfortably but not huge and clunky. It is perfect for casual use. Its durable, easy to wash and stylish. \n",
      "\n",
      "0.6818181818181818 ------\n",
      " \n",
      " This is a super cute sweater. Not as long as pictured, but I am 5'8&#34;, so I don't normally expect things to look on me the same as on models. It is thin, so will need something underneath, as pictured. But, it will look great with a dark/bright tank underneath and dark cargos or jeans. For the price, you can't beat a great little layering sweater like this. \n",
      "\n",
      "1.0 ------\n",
      " \n",
      " Very nice and very comfortable for a guy who just started wearing lingerie.  The high cut makes it very comfortable. \n",
      "\n",
      "0.9230769230769231 ------\n",
      " \n",
      " The size large barely fit my husband (shoe size 9).  They fit me better (shoe size 7 1/2) and they aren't available in size extra large.  Also, the toes are fraying after only a few wearings/washings so that I actually thought I had them inside out at first.  I also wish they came up a little higher around the ankle.  They are non slip though. \n",
      "\n",
      "0.8333333333333334 ------\n",
      " \n",
      " I'm a big Tom's fan! this is my first pair of heeled Tom's. Overall they are comfortable but a bit narrower than I expected. The canvas does give over time so they are stretching a bit. Looks great with everything. \n",
      "\n",
      "0.1111111111111111 ------\n",
      " \n",
      " I openly admit I am a HUGE fan of distressed clothing. I have just never liked the brand new look especially with T-shirts, sweatshirts, blue jeans, and chino's. I am not into the heavily distressed look with big rips and holes everywhere but a nice subtle distress job can turn a great piece of clothing into one of my favorites. With that being said distressed clothing can be expensive. Its ironic as your paying more, sometimes considerably more, for clothing that is basically used and is not going to have as long of a lifespan. That is why I decided to learn how to distress my own clothing. I have been doing it for years now and have become very good at it. Its actually not as hard as some might think and not only does it save you money but it also allows you to distress an item exactly how you like it and exactly where you want it.I often get asked by some of my family members to distress a particular piece of clothing and that is where Carhartt comes into play as my nephew loves Carhartt and he has had me distress a couple of these jackets over the last year. The reason I am bringing this up is because I have learned that jackets like these are actually perfect for distressing. In fact I ended up liking the job I did on this particular jacket so much that I would up hooking myself up with one. The shell material, which is 100% cotton, is very similar to that of blue jeans which is why it lends itself so well to distressing. To be honest I actually didn't even care much for this jacket when it was brand new. Dont get me wrong its a nice jacket, it just goes back to the whole I don't like new sweatshirts or blue jeans problem I have, lol. Once I had given this jacket a nice round of distressing it just really changed the entire look of the jacket. I have actually had multiple compliments on the jacket since I started wearing it, in fact I even had someone ask me if I distressed it myself and then offer to pay me if I would do one from them. I politely declined as its actually quite a time consuming process and I just don't have that sort of time right now. Its was still nice to hear.Overall this is a really nice jacket that is actually a lot warmer than I though it was going to be. While I don't particularly like the \"New\" look of the jacket off the rack, a couple rounds of distressing quickly turned it into one of my favorites. If you know how to distress clothing for yourself and you like this jacket then you might want to consider giving it a go. Again this style jacket is absolutely perfect for distressing. In fact I just ordered a Carhartt Sandstone ridge jacket a couple days back and plan on doing the same thing to that jacket.Off the rack - 3 starsDistressed - 5 stars!! \n",
      "\n",
      "0.7142857142857143 ------\n",
      " \n",
      " From the picture, I thought these would be the color of some sugar confection.  They are neon pink.  Like, glow in the dark, a blind person could not miss them, pink.  They aren't quite as comfy as my Gel Asics, but still cushiony and well ventilated.  They also provide good stability.  I ordered a half size up. \n",
      "\n",
      "0.7777777777777778 ------\n",
      " \n",
      " This runs a bit small but once its fitted right this thing is sexy.  Really accentuates my curves and turns my bf on everytime he sees me in it. \n",
      "\n",
      "1.0 ------\n",
      " \n",
      " I love wearing Reef shoes.  I only wear Reef!  Highly reccomend for anyone who wants comfort and a great looking shoe for summer!  Fast shipping!  Amazon Rocks! \n",
      "\n",
      "0.875 ------\n",
      " \n",
      " I bought this to wear to the beach--I wear the Coolibar swim tights with it for full sun protection.  My daughter said it's a very cute outfit and that's quite a stamp of approval.  With the ocean breeze, I could sit and read on the beach or take walks even in peak sun -- so much nicer than being confined to the villa until the sun sets! \n",
      "\n",
      "0.8 ------\n",
      " \n",
      " For the 60 some-odd dollars paid for this watch, you're getting one excellent timepiece. The case is stainless polished but not overly done so and the dial is of a watch in the $300 range. The display back is an added bonus to see the movement. ETA movement (majority of Swiss watches) eat your heart out. This watch has a Seiko movement that keeps accurate time. Keep in mind ALL mechanical, regardless of how much you pay for it, will loose or gain time eventually. Some keep better time than others. With this in-house movement (made by Seiko), there isn't some crazy mark-up like other companies who order from a movement company either Swiss, Chinese, or another country and put their dial/name on it.For the dollar, this watch CAN NOT be beat. Want a watch that sweeps instead of tick under $100? This is it. \n",
      "\n",
      "0.5714285714285714 ------\n",
      " \n",
      " These are way way bigger than the size! My husband won't wear them, they are just too grandfather like he says. \n",
      "\n",
      "0.8333333333333334 ------\n",
      " \n",
      " The description says button fly jeans. They are zipper fly. I will keep them any way cause they fit so nice and the price is good. \n",
      "\n",
      "0.8333333333333334 ------\n",
      " \n",
      " I think a color labeled &#34;Barely There&#34; should be much more neutral. I realize that if I had a dark tan or were of a different ethnicity perhaps these hose would look &#34;barely there&#34; on my legs. But as it is they remind me of the nylons I wore in junior high, colored &#34;Cinnamon.&#34; In fact I may send them back, I'm so disappointed. The shades depicted online are not at all representative. Cannot speak to fit or durability as I haven't tried them on yet. \n",
      "\n",
      "1.0 ------\n",
      " \n",
      " I am 6'3&#34; 210 with a muscular build and longer torso. I got the traditional superman logo and color in a XL. Fit is as expected and would order that size again. It looks like it is supposed to and I guess whether it looks &#34;good&#34; is in the eye of the beholder. It is a conversation starter.Traditional compression heat gear feel to it. I would order several if they were 20 bucks cheaper. As it is I wanted one, but at the MSRP, that was enough. Obviously UA is making plenty of money off of them but I wonder if they won't do just as good selling more at a lower price point as I am sure the high MSRP keeps some from buying one altogether and keeps others like myself from buying more than one. \n",
      "\n",
      "0.4 ------\n",
      " \n",
      " I wouldn't wear this out on the town but if you just wanna get bang'd in it it's ok.  I'm a 42 G so the cup size was a little small, the rest of the fit was pretty decent but i've had two kids and my i was trying to find something to cover up my disgusting stomach while i'm getting bang'd.  if you have a decent pair of underwear on it works great otherwise your giant gunt falls out the bottom. \n",
      "\n",
      "0.8 ------\n",
      " \n",
      " If you are looking for a heavy flannel shirt that is almost a jacket (it's as heavy as a denim jacket) this is the shirt you are looking for.  Great quality stitching and material.  Color looks great, even better than in the pictures.  Heavy weight and thickness will keep you warn on those cold early mornings out hunting, fishing with a stiff north wind, or working on the ranch.  Highly recommend! \n",
      "\n",
      "0.84 ------\n",
      " \n",
      " Very generous band. Nice weight. I had to have two links removed by my jeweler, and he really loved the watch. More than once he commented about what a nice watch it is. It was a Christmas gift for my husband, and although not much time has passed since Christmas, the watch is keeping perfect time and is just beautiful. I may steal it. Highly recommend. \n",
      "\n",
      "1.0 ------\n",
      " \n",
      " I used Russell T-Shirts for years, but the price and quality seemed to go in opposite directions, to its' detriment.I first got the Carthartt regular t shirts (all cotton), but tried one of these. They have some polyester woven in for moisture wicking. Though I prefer natural fibers on my body, I have to say these T-Shirts are comfortable, wear well, and DO wick away the moisture. The price is a bit steep though, so buy these when there is a sale or Carthartt rebate.I also tried a Dickies t shirt, they came 2 to a pack and were much cheaper in price. I like them as well.Almost forgot, I also chose these because I can get a light tan color which helps in the summer heat and doesn't look as bad if they get a little dirty. Russell seems to have problems carrying the light colors for summer. HTH \n",
      "\n",
      "0.8 ------\n",
      " \n",
      " There is no support or structure to these shoes at all. No arch. No stablilization. Your feet will just spread in any direction. It's like rugged nylon socks with a thin rubber sole. Flimsy. \n",
      "\n",
      "1.0 ------\n",
      " \n",
      " These are probably the most comfortable Flip Flops I have ever warn. Soft enough to be comfortable, but also solid enough to be supportive.The material they are made of seems to be of good quality as well. They are made of 2 layers. The top layer is the \"Mush\" material, which is very comfortable and soft. The bottom material is the base and is what has contact with the ground. This is much stiffer than the Mush layer, but still somewhat soft and flexible. I think these will last a while.I bought these primarily for shower use, but I got out with them once in a while as well. Just an FIY, these tend to stay wet a bit longer than other rubber or foam only flip flops, but eventually it dries. Not a big problem, just an FYI if you are looking for something that dries immediately.Also, I got rid of the tag that is on the inside of the flip flops. (It is on both left and right flip flops.) When wearing them the tag would bother me a lot. It doesn't scratch or hurt but It bothered me. If you have the same problem, take your favorite scissors or knife and get it off.I highly recommend these. \n",
      "\n",
      "1.0 ------\n",
      " \n",
      " I absolutely love how these look (I got the light blue ones), and they fit really well. I'd be delighted with them except that, having only worn them twice, the footpad in one has already come loose and bunches up in odd places under my foot. It's pretty annoying. I spend a lot of time trying to tug the pad back into place, but that only works for a min or so. I'm thinking of trying to reglue it, but I'd have to figure out what type of glue to use.Such a shame because I really like these shoes otherwise. \n",
      "\n"
     ]
    }
   ],
   "source": [
    "for i in range(30):\n",
    "    print(df.perc_helpful.iloc[i], '------\\n \\n' ,df.reviewText.iloc[i], '\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "CLNP3MXxBIvT"
   },
   "source": [
    "## Review Correlations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 372
    },
    "colab_type": "code",
    "id": "R9FKm5KdCW9G",
    "outputId": "f27c2c6a-35fe-4a39-c210-9ea200d8d95f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "outOf                   0.987658\n",
       "lexicon_count           0.254507\n",
       "review_len              0.254463\n",
       "char_count              0.254463\n",
       "word_count              0.251545\n",
       "unixReviewTime          0.234199\n",
       "sentence_count          0.221177\n",
       "perc_helpful            0.137956\n",
       "ave_user_helpfulness    0.130591\n",
       "review_lateness         0.100883\n",
       "readability             0.094821\n",
       "first_item_review       0.091949\n",
       "contains_update         0.091781\n",
       "user_experience         0.085456\n",
       "sum_word_count          0.067396\n",
       "ave_item_helpful        0.064793\n",
       "hyphen_density          0.055258\n",
       "colon_density           0.055138\n",
       "total_item_reviews      0.041271\n",
       "Name: nHelpful, dtype: float64"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# List the top 20 correlations to 'nHelpful'\n",
    "corr_values = abs(df.corr()['nHelpful'][:])\n",
    "corr_values.sort_values(ascending = False)[1:20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "code_folding": [],
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 372
    },
    "colab_type": "code",
    "id": "gnMaF_1y8qjx",
    "outputId": "eb72752c-8733-4c66-8f65-f4165b3eb6fe"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ave_user_helpfulness    0.673761\n",
       "ave_item_helpful        0.618988\n",
       "rating                  0.178509\n",
       "log_rating              0.173618\n",
       "nHelpful                0.137956\n",
       "polarity                0.081896\n",
       "outOf                   0.077890\n",
       "categoryID_1            0.067192\n",
       "adj_density             0.062667\n",
       "sentence_count          0.056447\n",
       "subjectivity            0.050532\n",
       "lexicon_count           0.049286\n",
       "unixReviewTime          0.047823\n",
       "review_len              0.046948\n",
       "char_count              0.046948\n",
       "word_count              0.046223\n",
       "all_caps_density        0.043396\n",
       "first_item_review       0.042484\n",
       "readability             0.024771\n",
       "Name: perc_helpful, dtype: float64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# List the top 20 correlations to 'perc_helpful'\n",
    "corr_values = abs(df.corr()['perc_helpful'][:])\n",
    "top20 = corr_values.sort_values(ascending = False)[1:20].keys().to_list()\n",
    "corr_values.sort_values(ascending = False)[1:20]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "UkDM6pFE84_D"
   },
   "source": [
    "# Define Model Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 301
    },
    "colab_type": "code",
    "id": "V49jblO8GCHC",
    "outputId": "afcc3e19-04c8-4347-c422-f5d6ccbb2bef"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['char_count',\n",
       " 'outOf',\n",
       " 'word_count',\n",
       " 'unixReviewTime',\n",
       " 'lexicon_count',\n",
       " 'readability',\n",
       " 'categoryID_1',\n",
       " 'categoryID_2',\n",
       " 'categoryID_3',\n",
       " 'categoryID_4',\n",
       " 'log_rating',\n",
       " 'polarity',\n",
       " 'subjectivity',\n",
       " 'price',\n",
       " 'sentence_count']"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# model_features = ['review_len','word_count','unixReviewTime','ave_user_helpfulness','user_experience',\n",
    "#                   'colon_density','price','ave_word_len','numerical_density','Sport Watches','Shapewear',\n",
    "#                   'exclamation_density','Lingerie, Sleep & Lounge','adj_density','rating','Men','Women','Running',\n",
    "#                  'all_caps_density','Athletic','hyphen_density','sum_word_count','sum_exclamation_density','contains_update',\n",
    "#                  'Exotic Apparel','review_lateness','ave_item_helpful','total_item_reviews']\n",
    "\n",
    "# model_features = ['ave_user_helpfulness','ave_item_helpful','user_experience','log_rating','review_lateness',\n",
    "#                   'unixReviewTime','colon_density','outOf','review_len','word_count','hyphen_density']\n",
    "\n",
    "# model_features = ['ave_user_helpfulness','ave_item_helpful','rating','outOf','unixReviewTime', 'review_len',\n",
    "#                   'word_count','categoryID','rating','all_caps_density','first_item_review','sum_word_count',\n",
    "#                   'sum_exclamation_density','user_experience','hyphen_density','ave_word_len','contains_update','exclamation_density']\n",
    "\n",
    "# model_features = ['ave_user_helpfulness','ave_item_helpful','rating','unixReviewTime', 'review_len',\n",
    "#                   'word_count','categoryID','all_caps_density','first_item_review','sum_word_count',\n",
    "#                   'sum_exclamation_density','user_experience','hyphen_density','ave_word_len','contains_update',\n",
    "#                   'exclamation_density','Men','Women','adj_density','noun_density','review_lateness',\n",
    "#                  'total_item_reviews']\n",
    "\n",
    "\n",
    "# model_features = ['unixReviewTime','lexicon_count','readability','log_rating','price','word_count',\n",
    "#                  'categoryID_1','categoryID_2','categoryID_3','categoryID_4','char_count',\n",
    "#                  'ave_user_helpfulness','all_caps_density']\n",
    "\n",
    "# model_features = ['ave_user_helpfulness','ave_item_helpful','rating','word_count',\n",
    "#                  'lexicon_count','unixReviewTime','review_lateness','readability',\n",
    "#                  'contains_update','user_experience','sum_word_count','hyphen_density',\n",
    "#                  'colon_density','total_item_reviews','ave_word_len']\n",
    "\n",
    "### BEST MODEL\n",
    "model_features = ['char_count','outOf','word_count','unixReviewTime','lexicon_count','readability',\n",
    "                 'categoryID_1','categoryID_2','categoryID_3','categoryID_4',\n",
    "                  'log_rating','polarity','subjectivity','price','sentence_count']\n",
    "\n",
    "# model_features = ['char_count','outOf','unixReviewTime','lexicon_count','readability',\n",
    "#                  'log_rating','polarity','subjectivity','price','word_count','sentence_count',\n",
    "#                  'categoryID_1','categoryID_2','categoryID_3','categoryID_4','all_caps_density',\n",
    "#                  'adj_density']\n",
    "\n",
    "# model_features = ['rating',\n",
    "#  'unixReviewTime',\n",
    "#  'price',\n",
    "#  'total_item_reviews',\n",
    "#  'ave_item_helpful',\n",
    "#  'review_len',\n",
    "#  'ave_word_len',\n",
    "#  'sum_word_count',\n",
    "#  'review_lateness',\n",
    "#  'readability',\n",
    "#  'polarity',\n",
    "#  'subjectivity',\n",
    "#  'adj_density',\n",
    "#  'lexicon_count']\n",
    "\n",
    "model_features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "E35Vy2rJXgOT"
   },
   "source": [
    "# 11 - Create Predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "XYMJBdXoVy1J"
   },
   "source": [
    "## Generate Noun Density"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "sOIw0vEMVx8y"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
      "[nltk_data]     /Users/az37/nltk_data...\n",
      "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
      "[nltk_data]       date!\n",
      "[nltk_data] Downloading package punkt to /Users/az37/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "# takes approximately 5 minutes to run\n",
    "nltk.download('averaged_perceptron_tagger');\n",
    "nltk.download('punkt');\n",
    "def count_nouns(review):\n",
    "  num_nouns = sum(1 for word, pos, in pos_tag(word_tokenize(review)) if pos == 'NN')\n",
    "  return num_nouns\n",
    "\n",
    "noun_count = test_df.reviewText.map(lambda x: count_nouns(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "gB7kw0x8V7ij"
   },
   "outputs": [],
   "source": [
    "# Generate noun density\n",
    "test_df['noun_density'] = noun_count / test_df['word_count']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "sPeAdc-LW5eN"
   },
   "source": [
    "## Generate Adjective Density"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "qIEjbowAW8Hl"
   },
   "outputs": [],
   "source": [
    "# takes approximately 5 minutes to run\n",
    "def count_adj(review):\n",
    "  num_adj = sum(1 for word, pos, in pos_tag(word_tokenize(review)) if pos == 'JJ')\n",
    "  return num_adj\n",
    "\n",
    "adj_count = test_df.reviewText.map(lambda x: count_adj(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Ubdo96IXW_B-"
   },
   "outputs": [],
   "source": [
    "# Generate adjective density\n",
    "test_df['adj_density'] = adj_count / test_df['word_count']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "colab_type": "code",
    "id": "1cHvjVuYA3M9",
    "outputId": "bf360e60-261c-49ca-dfea-a942e83366af"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(14000, 39)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>categoryID</th>\n",
       "      <th>categories</th>\n",
       "      <th>itemID</th>\n",
       "      <th>reviewerID</th>\n",
       "      <th>rating</th>\n",
       "      <th>reviewText</th>\n",
       "      <th>reviewHash</th>\n",
       "      <th>reviewTime</th>\n",
       "      <th>summary</th>\n",
       "      <th>unixReviewTime</th>\n",
       "      <th>...</th>\n",
       "      <th>review_lateness</th>\n",
       "      <th>log_rating</th>\n",
       "      <th>lexicon_count</th>\n",
       "      <th>readability</th>\n",
       "      <th>char_count</th>\n",
       "      <th>categoryID_1</th>\n",
       "      <th>categoryID_2</th>\n",
       "      <th>categoryID_3</th>\n",
       "      <th>categoryID_4</th>\n",
       "      <th>adj_density</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>[[Sports &amp; Outdoors, Other Sports, Dance, Clot...</td>\n",
       "      <td>I520932398</td>\n",
       "      <td>U816789534</td>\n",
       "      <td>3.0</td>\n",
       "      <td>I ordered according to the size chart but it's...</td>\n",
       "      <td>R157684793</td>\n",
       "      <td>07 15, 2011</td>\n",
       "      <td>Too small</td>\n",
       "      <td>1310688000</td>\n",
       "      <td>...</td>\n",
       "      <td>2.298240e+07</td>\n",
       "      <td>1.098612</td>\n",
       "      <td>27</td>\n",
       "      <td>5.0</td>\n",
       "      <td>147</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.148148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>[[Sports &amp; Outdoors, Clothing, Women, Hoodies]...</td>\n",
       "      <td>I969532331</td>\n",
       "      <td>U987148846</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Super thin but really cute and not cheap-looki...</td>\n",
       "      <td>R732719858</td>\n",
       "      <td>07 17, 2013</td>\n",
       "      <td>Fun hoodie</td>\n",
       "      <td>1374019200</td>\n",
       "      <td>...</td>\n",
       "      <td>4.654122e+07</td>\n",
       "      <td>1.386294</td>\n",
       "      <td>27</td>\n",
       "      <td>10.3</td>\n",
       "      <td>144</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.074074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>[[Clothing, Shoes &amp; Jewelry, Women, Accessorie...</td>\n",
       "      <td>I149943341</td>\n",
       "      <td>U628436634</td>\n",
       "      <td>5.0</td>\n",
       "      <td>It was a present for my sis, and she loves Fle...</td>\n",
       "      <td>R352659313</td>\n",
       "      <td>12 8, 2013</td>\n",
       "      <td>A Perfect hook up</td>\n",
       "      <td>1386460800</td>\n",
       "      <td>...</td>\n",
       "      <td>5.898282e+07</td>\n",
       "      <td>1.609438</td>\n",
       "      <td>23</td>\n",
       "      <td>7.5</td>\n",
       "      <td>112</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.086957</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 39 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  categoryID                                         categories      itemID  \\\n",
       "0          0  [[Sports & Outdoors, Other Sports, Dance, Clot...  I520932398   \n",
       "1          0  [[Sports & Outdoors, Clothing, Women, Hoodies]...  I969532331   \n",
       "2          0  [[Clothing, Shoes & Jewelry, Women, Accessorie...  I149943341   \n",
       "\n",
       "   reviewerID  rating                                         reviewText  \\\n",
       "0  U816789534     3.0  I ordered according to the size chart but it's...   \n",
       "1  U987148846     4.0  Super thin but really cute and not cheap-looki...   \n",
       "2  U628436634     5.0  It was a present for my sis, and she loves Fle...   \n",
       "\n",
       "   reviewHash   reviewTime            summary  unixReviewTime  ...  \\\n",
       "0  R157684793  07 15, 2011          Too small      1310688000  ...   \n",
       "1  R732719858  07 17, 2013         Fun hoodie      1374019200  ...   \n",
       "2  R352659313   12 8, 2013  A Perfect hook up      1386460800  ...   \n",
       "\n",
       "  review_lateness  log_rating  lexicon_count  readability  char_count  \\\n",
       "0    2.298240e+07    1.098612             27          5.0         147   \n",
       "1    4.654122e+07    1.386294             27         10.3         144   \n",
       "2    5.898282e+07    1.609438             23          7.5         112   \n",
       "\n",
       "   categoryID_1  categoryID_2  categoryID_3  categoryID_4  adj_density  \n",
       "0             0             0             0             0     0.148148  \n",
       "1             0             0             0             0     0.074074  \n",
       "2             0             0             0             0     0.086957  \n",
       "\n",
       "[3 rows x 39 columns]"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Test data\n",
    "print(test_df.shape)\n",
    "test_df.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "heading_collapsed": true,
    "id": "zDRbNllOd8bY"
   },
   "source": [
    "## Generate dummies for categories with 100 or more reviews and join with the dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "hidden": true,
    "id": "M3bfO1f-eGv5"
   },
   "outputs": [],
   "source": [
    "# Flatten categories\n",
    "test_df['categories_flat'] = test_df.categories.map(lambda x: [item for sublist in x for item in sublist])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "hidden": true,
    "id": "mAMGljsvd97v"
   },
   "outputs": [],
   "source": [
    "# Create dummies for each category\n",
    "mlb = MultiLabelBinarizer()\n",
    "mlb.fit_transform(test_df['categories_flat'])\n",
    "\n",
    "one_hot_encoding_for_categories = pd.DataFrame(mlb.fit_transform(test_df['categories_flat']),columns=mlb.classes_, index=test_df.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 606
    },
    "colab_type": "code",
    "hidden": true,
    "id": "qPpL2JxVeIsd",
    "outputId": "47dc5ab8-b091-4924-acc6-69c6f3b291b4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "categories kept:  Index(['ASICS', 'Accessories', 'Active', 'Active Pants',\n",
      "       'Active Shirts & Tees', 'Amazon Curated Collection', 'Athletic',\n",
      "       'Athletic Socks', 'Available for International Shipping', 'B',\n",
      "       ...\n",
      "       'Underwear', 'Walking', 'Wallets',\n",
      "       'Wallets, Card Cases & Money Organizers', 'Watches', 'Winter Promo',\n",
      "       'Women', 'Work Wear & Uniforms', 'Wrist Watches', 'crocs'],\n",
      "      dtype='object', length=123)\n"
     ]
    }
   ],
   "source": [
    "# Generate category columns for categories that have at least 100 or more reviews.\n",
    "columns_to_keep = one_hot_encoding_for_categories.columns[one_hot_encoding_for_categories.sum() >= 100] #500]\n",
    "one_hot_encoding_for_categories_reduced = one_hot_encoding_for_categories[columns_to_keep]\n",
    "print('categories kept: ',one_hot_encoding_for_categories_reduced.columns)\n",
    "test_df = test_df.join(one_hot_encoding_for_categories_reduced)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 274
    },
    "colab_type": "code",
    "hidden": true,
    "id": "yNYjGQwseIj1",
    "outputId": "e3eb9558-e6e3-4633-9a06-49a796049474"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(14000, 157)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ave_user_helpfulness</th>\n",
       "      <th>ave_item_helpful</th>\n",
       "      <th>rating</th>\n",
       "      <th>unixReviewTime</th>\n",
       "      <th>review_len</th>\n",
       "      <th>word_count</th>\n",
       "      <th>categoryID</th>\n",
       "      <th>all_caps_density</th>\n",
       "      <th>first_item_review</th>\n",
       "      <th>sum_word_count</th>\n",
       "      <th>...</th>\n",
       "      <th>hyphen_density</th>\n",
       "      <th>ave_word_len</th>\n",
       "      <th>contains_update</th>\n",
       "      <th>exclamation_density</th>\n",
       "      <th>Men</th>\n",
       "      <th>Women</th>\n",
       "      <th>adj_density</th>\n",
       "      <th>noun_density</th>\n",
       "      <th>review_lateness</th>\n",
       "      <th>total_item_reviews</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.666667</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1310688000</td>\n",
       "      <td>147</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.287706e+09</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.444444</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.148148</td>\n",
       "      <td>0.148148</td>\n",
       "      <td>2.298240e+07</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.461538</td>\n",
       "      <td>0.911456</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1374019200</td>\n",
       "      <td>144</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.321892e+09</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0.037037</td>\n",
       "      <td>5.333333</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.074074</td>\n",
       "      <td>0.185185</td>\n",
       "      <td>5.212672e+07</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.911456</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1386460800</td>\n",
       "      <td>112</td>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.321892e+09</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.869565</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.086957</td>\n",
       "      <td>0.086957</td>\n",
       "      <td>6.456832e+07</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.911456</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1353542400</td>\n",
       "      <td>666</td>\n",
       "      <td>135</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.321892e+09</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.933333</td>\n",
       "      <td>0</td>\n",
       "      <td>0.001502</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.044444</td>\n",
       "      <td>0.148148</td>\n",
       "      <td>3.164992e+07</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.911456</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1396310400</td>\n",
       "      <td>190</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.321892e+09</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.131579</td>\n",
       "      <td>0.131579</td>\n",
       "      <td>7.441792e+07</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   ave_user_helpfulness  ave_item_helpful  rating  unixReviewTime  review_len  \\\n",
       "0              0.666667          1.000000     3.0      1310688000         147   \n",
       "1              0.461538          0.911456     4.0      1374019200         144   \n",
       "2              1.000000          0.911456     5.0      1386460800         112   \n",
       "3              0.714286          0.911456     5.0      1353542400         666   \n",
       "4              1.000000          0.911456     4.0      1396310400         190   \n",
       "\n",
       "   word_count  categoryID  all_caps_density  first_item_review  \\\n",
       "0          27           0               0.0       1.287706e+09   \n",
       "1          27           0               0.0       1.321892e+09   \n",
       "2          23           0               0.0       1.321892e+09   \n",
       "3         135           0               0.0       1.321892e+09   \n",
       "4          38           0               0.0       1.321892e+09   \n",
       "\n",
       "   sum_word_count  ...  hyphen_density  ave_word_len  contains_update  \\\n",
       "0               2  ...        0.000000      5.444444                0   \n",
       "1               2  ...        0.037037      5.333333                0   \n",
       "2               4  ...        0.000000      4.869565                0   \n",
       "3               4  ...        0.000000      4.933333                0   \n",
       "4               3  ...        0.000000      5.000000                0   \n",
       "\n",
       "   exclamation_density  Men  Women  adj_density  noun_density  \\\n",
       "0             0.000000    0      1     0.148148      0.148148   \n",
       "1             0.000000    0      1     0.074074      0.185185   \n",
       "2             0.000000    0      1     0.086957      0.086957   \n",
       "3             0.001502    0      1     0.044444      0.148148   \n",
       "4             0.000000    0      1     0.131579      0.131579   \n",
       "\n",
       "   review_lateness  total_item_reviews  \n",
       "0     2.298240e+07                  15  \n",
       "1     5.212672e+07                   4  \n",
       "2     6.456832e+07                   5  \n",
       "3     3.164992e+07                  40  \n",
       "4     7.441792e+07                   8  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(test_df.shape)\n",
    "test_df.head(5)\n",
    "test_df[model_features].head()  # Ensure that categories within the model_features were returned when creating one-hot encodings for the categories."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "B-61fusoDyF6"
   },
   "source": [
    "# Evaluate Test Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "heading_collapsed": true,
    "id": "5JRUhZTyD756"
   },
   "source": [
    "## Build Linear Regression Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "### Train and Check Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "hidden": true,
    "id": "kTgf3uizGDgV",
    "outputId": "6b950fe2-8954-4154-c940-e03a979479e2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 0.02390404812974684\n"
     ]
    }
   ],
   "source": [
    "X = df[model_features]\n",
    "y = df.perc_helpful\n",
    "              \n",
    "# Partition data into Training and Val set.\n",
    "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state = 0)\n",
    "\n",
    "# Train model\n",
    "regressor = LinearRegression(normalize=True)\n",
    "#y = y_train.perc_helpful\n",
    "regressor.fit(X_train, y_train);\n",
    "\n",
    "y_pred = regressor.predict(X_val)\n",
    "\n",
    "# Ensure all negative values are turned to 0\n",
    "y_pred[y_pred < 0] = 0 #\n",
    "\n",
    "# Evaluate the model performance\n",
    "print('Mean Absolute Error:', metrics.mean_absolute_error(y_val,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "hidden": true,
    "id": "zceh0KD_Dk-g"
   },
   "outputs": [],
   "source": [
    "X_test = test_df[model_features]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "heading_collapsed": true,
    "hidden": true,
    "id": "CO_mlntvj5Vw"
   },
   "source": [
    "### Linear Regression Model Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "hidden": true,
    "id": "0f6SwB225wAy"
   },
   "outputs": [],
   "source": [
    "# Train on full training data\n",
    "X_train = df[model_features]\n",
    "y_train = df.perc_helpful\n",
    "\n",
    "# Train model\n",
    "regressor = LinearRegression(normalize=True)\n",
    "#y = y_train.perc_helpful\n",
    "regressor.fit(X_train, y_train);\n",
    "\n",
    "# Predict 'perc_helpful' from model for test data\n",
    "y_pred = regressor.predict(X_test)\n",
    "\n",
    "# Ensure all negative values are turned to 0\n",
    "y_pred[y_pred < 0] = 0 #\n",
    "\n",
    "# Create final array for saving to file\n",
    "y_pred_for_printing = dict(zip(zip(test_df.reviewerID,test_df.itemID),y_pred)) #y_pred}\n",
    "\n",
    "# for ease of saving into predictions_Helpful.txt\n",
    "y_pred = y_pred_for_printing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "rocy2UaLj8XB"
   },
   "source": [
    "## Decision Tree Model Test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "heading_collapsed": true,
    "id": "OeO-KE0eu1gv"
   },
   "source": [
    "### Train and Check Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 107
    },
    "colab_type": "code",
    "hidden": true,
    "id": "Y8ZfWTlDkAB5",
    "outputId": "4b90519f-a29f-490b-e0f9-9906a84112dd"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 0.01594609729893724\n",
      "[6.80267169e-01 2.44926094e-01 6.08735394e-03 5.22754322e-03\n",
      " 4.48099591e-03 7.72399526e-03 7.31933375e-03 1.09494191e-02\n",
      " 3.92153301e-04 5.05319914e-03 6.39422033e-03 3.97714224e-03\n",
      " 1.44497248e-03 9.34882825e-03 6.40758006e-03]\n",
      "['ave_user_helpfulness', 'ave_item_helpful', 'rating', 'word_count', 'lexicon_count', 'unixReviewTime', 'review_lateness', 'readability', 'contains_update', 'user_experience', 'sum_word_count', 'hyphen_density', 'colon_density', 'total_item_reviews', 'ave_word_len']\n"
     ]
    }
   ],
   "source": [
    "X = df[model_features]\n",
    "y = df.perc_helpful\n",
    "\n",
    "# Partition data into Training and Val set.\n",
    "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.5, random_state = 1)\n",
    "\n",
    "dtree = AdaBoostRegressor(DecisionTreeRegressor(max_depth = 400),n_estimators = 500)\n",
    "dtree.fit(X_train, y_train)\n",
    "\n",
    "# Predicting a new result\n",
    "y_pred = dtree.predict(X_val)\n",
    "\n",
    "# Evaluate the model performance\n",
    "print('Mean Absolute Error:', metrics.mean_absolute_error(y_val,y_pred))\n",
    "\n",
    "# Important Features\n",
    "print(dtree.feature_importances_)\n",
    "print(model_features)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "HI42XswTu6lM"
   },
   "source": [
    "### Train on Full Data and Predict Test Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "VqI2QoBUxeg1"
   },
   "outputs": [],
   "source": [
    "X_train = df[model_features]\n",
    "y_train = df.perc_helpful\n",
    "\n",
    "X_test = test_df[model_features]\n",
    "\n",
    "# Train again on full training data\n",
    "dtree = AdaBoostRegressor(DecisionTreeRegressor(max_depth = 100),n_estimators = 500)\n",
    "dtree.fit(X_train, y_train)\n",
    "\n",
    "# Predict on X_test\n",
    "y_pred = dtree.predict(X_test)\n",
    "\n",
    "# Create final array for saving to file\n",
    "y_pred_for_printing = dict(zip(zip(test_df.reviewerID,test_df.itemID),y_pred))\n",
    "\n",
    "# for ease of saving into predictions_Helpful.txt\n",
    "y_pred = y_pred_for_printing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "MzOirFLUyjEn"
   },
   "source": [
    "## XGBOOST"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Train and Check Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 72
    },
    "colab_type": "code",
    "id": "1PkzGasvyimO",
    "outputId": "2ca9a978-c77d-4767-b0b4-94840c02d182"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/xgboost/core.py:587: FutureWarning: Series.base is deprecated and will be removed in a future version\n",
      "  if getattr(data, 'base', None) is not None and \\\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 0.10461694705972836\n"
     ]
    }
   ],
   "source": [
    "import xgboost as xgb\n",
    "X_train = df[model_features]\n",
    "y_train = df.perc_helpful\n",
    "\n",
    "# Partition data into Training and Val set.\n",
    "X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.20, random_state = 0)\n",
    "\n",
    "data_matrix = xgb.DMatrix(data=X_train,label=y_train)\n",
    "\n",
    "xg_reg = xgb.XGBRegressor(objective ='reg:linear', colsample_bytree = 0.90, learning_rate = 0.01,\n",
    "                max_depth = 100, alpha = 1, n_estimators = 500)\n",
    "\n",
    "# Fit model to train/val\n",
    "xg_reg.fit(X_train,y_train)\n",
    "\n",
    "# Predicting a new result\n",
    "y_pred = xg_reg.predict(X_val)\n",
    "\n",
    "# Evaluate the model performance\n",
    "print('Mean Absolute Error:', metrics.mean_absolute_error(y_val,y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Train on Full Data and Predict on Test Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [],
   "source": [
    "import xgboost as xgb\n",
    "X_train = df[model_features]\n",
    "y_train = df.perc_helpful\n",
    "\n",
    "\n",
    "X_test = test_df[model_features]\n",
    "\n",
    "data_matrix = xgb.DMatrix(data=X_train,label=y_train)\n",
    "\n",
    "xg_reg = xgb.XGBRegressor(objective ='reg:linear', colsample_bytree = 0.90, learning_rate = 0.01,\n",
    "                max_depth = 500, alpha = 1, n_estimators = 1000)\n",
    "\n",
    "# Fit model to train/val\n",
    "xg_reg.fit(X_train,y_train)\n",
    "\n",
    "# Predicting a new result\n",
    "y_pred = xg_reg.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create final array for saving to file\n",
    "y_pred_for_printing = dict(zip(zip(test_df.reviewerID,test_df.itemID),y_pred))\n",
    "\n",
    "# for ease of saving into predictions_Helpful.txt\n",
    "y_pred = y_pred_for_printing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a29029f60>"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "xgb.plot_importance(xg_reg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Diagnose"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1a3b92d080>"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1152x1152 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "cmap = sns.cubehelix_palette(dark=.3, light=.8, as_cmap=True)\n",
    "# Use the 'hue' argument to provide a factor variable\n",
    "plt.figure(figsize=(16, 16))\n",
    "sns.lmplot(x=\"gunning_fog_score\", y=\"perc_helpful\", data=df, fit_reg=False, hue='perc_helpful', palette = sns.color_palette(\"Blues_d\"),legend=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 346
    },
    "colab_type": "code",
    "id": "8erfv4eh2b-D",
    "outputId": "eebf4636-4d63-4b28-ed03-f748ab72640e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a3fb96160>"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x1152 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(16, 16))\n",
    "sns.regplot(x = y_pred,y = y_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Kp1n_uu4XNI5"
   },
   "source": [
    "# Save Output File"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 248905
    },
    "colab_type": "code",
    "id": "8zxsMT96_qV1",
    "outputId": "b1673167-847a-4403-8d0f-7bd043baf768"
   },
   "outputs": [],
   "source": [
    "predictions = open(\"predictions_Helpful.txt\", 'w')\n",
    "for l in open(\"pairs_Helpful.txt\"):\n",
    "    if l.startswith(\"userID\"):\n",
    "        # Header\n",
    "        predictions.write(l)\n",
    "        continue\n",
    "    u,i,outOf = l.strip().split('-')\n",
    "    outOf = int(outOf)\n",
    "\n",
    "    if u in userRate:\n",
    "        predictions.write(u + '-' + i + '-' + str(outOf) + ',' + str(round(outOf*y_pred[u,i])) + '\\n')\n",
    "    else:\n",
    "        predictions.write(u + '-' + i + '-' + str(outOf) + ',' + str(outOf*averageRate) + '\\n')\n",
    "\n",
    "predictions.close()\n",
    "    \n",
    "    \n",
    "## Try this for userRate, then itemRate when userRate is not found, then average from global\n",
    "#     if u in userRate:\n",
    "#         if outOf < (outOf * y_pred[(u,i)]):\n",
    "#             print('correcting for > outOf.................')\n",
    "#             print('observed',outOf,'smaller than',(outOf * y_pred[(u,i)]))\n",
    "#             predictions.write(u + '-' + i + '-' + str(outOf) + ',' + str(outOf) + '\\n')\n",
    "#         else:\n",
    "#             print('printed value')\n",
    "#             predictions.write(u + '-' + i + '-' + str(outOf) + ',' + str(outOf*y_pred[(u,i)]) + '\\n')\n",
    "#     else:\n",
    "#         if i in itemRate:\n",
    "#             if outOf < (outOf * y_pred[(u,i)]):\n",
    "#                 print('correcting for > outOf.................')\n",
    "#                 print('observed',outOf,'smaller than',(outOf * y_pred[(u,i)]))\n",
    "#                 predictions.write(u + '-' + i + '-' + str(outOf) + ',' + str(outOf) + '\\n')\n",
    "#             else:\n",
    "#                 print('used item rate.....')\n",
    "#                 predictions.write(u + '-' + i + '-' + str(outOf) + ',' + str(outOf*itemRate[i]) + '\\n')\n",
    "#         else:\n",
    "#             print('used global average')\n",
    "#             predictions.write(u + '-' + i + '-' + str(outOf) + ',' + str(outOf*averageRate) + '\\n')\n",
    "# predictions.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "# Try Vectorize Review Text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 72
    },
    "colab_type": "code",
    "hidden": true,
    "id": "jYxJmnoxy2aS",
    "outputId": "da546a0a-fdcc-4e54-8e41-4730144a7b39"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/dist-packages/sklearn/feature_extraction/text.py:300: UserWarning: Your stop_words may be inconsistent with your preprocessing. Tokenizing the stop words generated tokens ['abov', 'afterward', 'alon', 'alreadi', 'alway', 'ani', 'anoth', 'anyon', 'anyth', 'anywher', 'becam', 'becaus', 'becom', 'befor', 'besid', 'cri', 'describ', 'dure', 'els', 'elsewher', 'empti', 'everi', 'everyon', 'everyth', 'everywher', 'fifti', 'forti', 'henc', 'hereaft', 'herebi', 'howev', 'hundr', 'inde', 'mani', 'meanwhil', 'moreov', 'nobodi', 'noon', 'noth', 'nowher', 'onc', 'onli', 'otherwis', 'ourselv', 'perhap', 'pleas', 'sever', 'sinc', 'sincer', 'sixti', 'someon', 'someth', 'sometim', 'somewher', 'themselv', 'thenc', 'thereaft', 'therebi', 'therefor', 'togeth', 'twelv', 'twenti', 'veri', 'whatev', 'whenc', 'whenev', 'wherea', 'whereaft', 'wherebi', 'wherev', 'whi', 'yourselv'] not in stop_words.\n",
      "  'stop_words.' % sorted(inconsistent))\n"
     ]
    }
   ],
   "source": [
    "# from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "# from nltk.stem.snowball import SnowballStemmer\n",
    "\n",
    "# stemmer = SnowballStemmer(\"english\")\n",
    "\n",
    "# def tokens(x):\n",
    "#     x = x.split()\n",
    "#     stems = []\n",
    "#     [stems.append(stemmer.stem(word)) for word in x]\n",
    "#     return stems\n",
    "\n",
    "# vectorizer = TfidfVectorizer(tokenizer = tokens, stop_words = 'english', ngram_range=(1, 1), min_df = 0.01)\n",
    "# features = vectorizer.fit_transform(df['reviewText'])"
   ]
  }
 ],
 "metadata": {
  "accelerator": "TPU",
  "colab": {
   "collapsed_sections": [
    "535thJoVBHXQ",
    "KmUhx3gFiVSt",
    "KFGsYibtq1W1",
    "CVLBHW562bdu",
    "AVQgracJ80GK",
    "XYMJBdXoVy1J",
    "sPeAdc-LW5eN",
    "zDRbNllOd8bY",
    "kpAHdGMVyyYG"
   ],
   "name": "DSE220 - Final Project - Arlens Zeqollari",
   "provenance": [],
   "toc_visible": true,
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
